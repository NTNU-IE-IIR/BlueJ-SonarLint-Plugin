<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>no.ntnu.iir.bluej.extensions.linting.sonarlint</groupId>
  <artifactId>sonarlint4bluej</artifactId>
  <version>1.0</version>

  <name>sonarlint4bluej</name>
  <url>https://github.com/NTNU-IE-IIR/BlueJ-SonarLint-Plugin</url>

  <!--
  Link the project to the SCM (GitHub) to enable the use of the Maven Release plugin
  -->
  <scm>
    <connection>scm:git:git@github.com:NTNU-IE-IIR/BlueJ-SonarLint-Plugin.git</connection>
    <developerConnection>scm:git:git@github.com:NTNU-IE-IIR/BlueJ-SonarLint-Plugin.git</developerConnection>
    <url>ssh://github.com/NTNU-IE-IIR/BlueJ-SonarLint-Plugin</url>
    <tag>sonarlint4bluej-1.0</tag>
  </scm>

  <!--
  BlueJ 5.0.3 uses the following versions of Java and JavaFX:
      Java: 11.0.14.1
      JavaFX: 11.0.13.1+1

  Note on <scope>provided</scope> in the dependency section:
         We use this scope to mark dependencies that should be provided at runtime by JDK or a container.
         (https://www.baeldung.com/maven-dependency-scopes)
  -->
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <sonarlint-core.version>7.0.0.37656</sonarlint-core.version>
    <sonarlint-java-plugin.version>7.6.0.28201</sonarlint-java-plugin.version>
    <!-- Use a JavaFX version closest to the version used by BlueJ (11.0.13.1 is not available on the Maven repo) -->
    <javafx.version>12</javafx.version>
  </properties>

  <dependencies>
    <dependency>
	    <groupId>com.github.NTNU-IE-IIR</groupId>
	    <artifactId>bluej-linting-core</artifactId>
	    <version>1.0.0</version>
	  </dependency>

    <dependency>
      <groupId>org.sonarsource.sonarlint.core</groupId>
      <artifactId>sonarlint-core</artifactId>
      <version>${sonarlint-core.version}</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.11</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.openjfx</groupId>
      <artifactId>javafx-web</artifactId>
      <version>${javafx.version}</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>bluej</groupId>
      <artifactId>bluejext2</artifactId>
      <type>jar</type>
      <version>3.3</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>

  <build>
    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->
      <plugins>
        <!-- clean lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#clean_Lifecycle -->
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!-- default lifecycle, jar packaging: see https://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_jar_packaging -->
        <plugin>
          <artifactId>maven-resources-plugin</artifactId>
          <version>3.0.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.8.0</version>
        </plugin>
        <plugin>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.22.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-jar-plugin</artifactId>
          <version>3.0.2</version>
          <configuration>
            <finalName>${project.artifactId}-${project.version}-original</finalName>
            <archive>
              <manifest>
                <addClasspath>true</addClasspath>
                <mainClass>no.ntnu.iir.bluej.extensions.linting.sonarlint.SonarLintExtension</mainClass>
                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                <addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
              </manifest>
            </archive>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-install-plugin</artifactId>
          <version>2.5.2</version>
        </plugin>
        <plugin>
          <artifactId>maven-deploy-plugin</artifactId>
          <version>2.8.2</version>
        </plugin>
        <!-- site lifecycle, see https://maven.apache.org/ref/current/maven-core/lifecycles.html#site_Lifecycle -->
        <plugin>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>
        <plugin>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>3.0.0</version>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>3.2.0</version>
        <executions>
          <execution>
            <id>copy</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <artifactItems>
            <artifactItem>
              <groupId>org.sonarsource.java</groupId>
              <artifactId>sonar-java-plugin</artifactId>
              <version>${sonarlint-java-plugin.version}</version>
              <type>jar</type>
              <overWrite>false</overWrite>
              <outputDirectory>${project.build.directory}/classes/plugins</outputDirectory>
              <destFileName>sonar-java-plugin.jar</destFileName>
            </artifactItem>
          </artifactItems>
        </configuration>
      </plugin>
      
      <plugin>
        <!--
          This plugin provides the capability to package the artifact in an uber-jar,
          including its dependencies and to shade - i.e. rename - the packages of some of the dependencies.
        -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <goals>
             <goal>shade</goal>
            </goals>
            <configuration>
              <outputFile>./target/${project.artifactId}-${project.version}.jar</outputFile>
              <shadedArtifactAttached>true</shadedArtifactAttached>
              <artifactSet>
                <excludes>
                  <exclude>org.openjfx:*</exclude>
                  <exclude>junit:*</exclude>
                  <exclude>bluej:*</exclude>
                </excludes>
              </artifactSet>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <repositories>
    <!--
      To get a Git project into your build
    -->
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
	</repository>

    <!--
      To get libraries stored in the lib-folder into the build.
    -->
    <repository>
      <id>local_repository</id>
      <name>Repository in the projects lib directory</name>
      <layout>default</layout>
      <url>file:///${project.basedir}/lib</url>
      <releases><enabled>true</enabled></releases>
    </repository>
  </repositories>
</project>
